name: Dev Environment CI/CD

on:
  push:
    branches: [ dev, develop ]
  pull_request:
    branches: [ dev, develop ]

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

permissions:
  contents: read

jobs:
  test:
    name: Run Tests (Dev)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run check
      continue-on-error: true

    - name: Run tests
      run: npm run test:run

    - name: Run tests with coverage
      run: npm run test:coverage
      if: matrix.node-version == '20.x'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  lint:
    name: Lint Code (Dev)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run check
      continue-on-error: true

  build:
    name: Build Application (Dev)
    runs-on: ubuntu-latest
    needs: [test, lint]
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: development

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dev-build-artifacts
        path: dist/
        retention-days: 7

  deploy-backend:
    name: Deploy Backend to Cloud Run (Dev)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/fibonrose-backend-dev:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/fibonrose-backend-dev:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy fibonrose-backend-dev \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/fibonrose-backend-dev:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=development

  deploy-frontend:
    name: Deploy Frontend to Vercel (Dev)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    permissions:
      contents: read
      deployments: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Vercel CLI
      run: npm install -g vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy to Vercel (Preview)
      run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  python-tests:
    name: Run Python Tests (Dev)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found"

    - name: Run Python tests
      run: |
        python test-deaf-first-modules.py || echo "Python tests not configured"
      continue-on-error: true

  security-scan:
    name: Security Scan (Dev)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    permissions: {}

    steps:
    - name: Send notification
      run: |
        echo "Deployment completed for dev environment"
        echo "Backend status: ${{ needs.deploy-backend.result }}"
        echo "Frontend status: ${{ needs.deploy-frontend.result }}"
